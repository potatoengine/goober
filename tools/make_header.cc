// goober - by Sean Middleditch
// This is free and unencumbered software released into the public domain.
// See LICENSE.md for more details.

#include <filesystem>
#include <fstream>
#include <iostream>

int main(int argc, char* argv[]) {
    using namespace std::filesystem;

    if (argc < 4) {
        std::cerr << argv[0] << ": <infile> <outfile> <name>\n";
        return 1;
    }

    path inPath = argv[1];
    path outPath = argv[2];
    std::string name = argv[3];

    std::ifstream inFile(inPath, std::ios::binary);
    if (!inFile) {
        std::cerr << "error: failed to open `" << inPath.generic_string() << "' for reading\n";
        return 2;
    }

    std::ofstream outFile(outPath, std::ios::trunc | std::ios::binary);
    if (!outFile) {
        std::cerr << "error: failed to open `" << outPath.generic_string() << "' for writing\n";
        return 3;
    }

    outFile << "// Generated file!\n";
    outFile << "// generated by " << argv[0] << '\n';
    outFile << "// input: " << inPath.generic_string() << '\n';
    outFile << "#include <stddef.h>\n";
    outFile << "unsigned char const " << name << "_data[] = {\n  ";

    int column = 0;
    const int maxColumn = 8;

    outFile << std::hex;

    char buffer[8196];
    std::size_t totalBytes = 0;
    while (inFile.read(buffer, sizeof(buffer))) {
        const std::size_t readBytes = inFile.gcount();
        totalBytes += readBytes;

        for (std::size_t index = 0; index != readBytes; ++index) {
            if (column++ == maxColumn) {
                column = 0;
                outFile << "\n  ";
            }
            outFile << "0x" << static_cast<int>(buffer[index]) << ", ";
        }
    }

    outFile << "\n};\n";
    outFile << "size_t const " << name << "_size = " << std::dec << totalBytes << ";\n";
}
